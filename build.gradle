plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.oz'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = 'app.jar'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // base62 인코딩
    implementation 'io.seruco.encoding:base62:0.1.3'

    // spock framework dependencies
    testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
    testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'

    // 런타임에 클래스 기반 spock mock을 만들기 위해
    testImplementation 'net.bytebuddy:byte-buddy:1.17.6'

    // testcontainers dependencies
    testImplementation "org.testcontainers:spock:1.21.3"
    testImplementation "org.testcontainers:mariadb:1.21.3"

    // CSV 파싱
    implementation 'com.opencsv:opencsv:5.9'

    // spring retry
    implementation 'org.springframework.retry:spring-retry'

    // mockWebServer
    testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

}

//tasks.named('test') {
//    useJUnitPlatform()
//}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty 'KAKAO_REST_API_KEY', project.findProperty('KAKAO_REST_API_KEY') ?: ''
}

configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
}

// $ ./gradlew clean build -PKAKAO_REST_API_KEY={api key 값} 명령어로 전체 테스트 및 빌드 후 jar 파일 생성
processTestResources{
    boolean hasProperty = project.hasProperty('KAKAO_REST_API_KEY')
    println "Set kakao rest api key : ${hasProperty}"
    filesMatching('**/application.yml') {
        if (hasProperty) {
            expand(project.properties)
        } else {
            throw new GradleException("KAKAO_REST_API_KEY property is not set. Please provide it to run tests.")
        }
    }
}
